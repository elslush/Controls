@using Microsoft.JSInterop;

@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="btn-group" @onclick:stopPropagation="true">
    <button class="form-select" @onclick="dropdownManager.Toggle" @onclick:stopPropagation="true">
        @ButtonText
    </button>
    <div class="dropdown-menu @DropdownCssClass">
        @Content
    </div>
</div>

@code {
    private ElementReference? 
    private DropdownHandler? dropdownHandler;

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public bool IsDropped { get; set; }

    [Parameter]
    public EventCallback<bool> IsDroppedChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dropdownHandler = await DropdownHandler.New(JS);
            await dropdownHandler.AddCloseEventListeners(Update, buttonReference, tooltipReference);
        }
    }

    public Task ToggleDropdown()
    {
        IsDropped = !IsDropped;
        return IsDroppedChanged.InvokeAsync();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (dropdownHandler is not null)
            await dropdownHandler.DisposeAsync();
    }
}
