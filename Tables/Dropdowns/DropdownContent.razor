@using Microsoft.JSInterop;

@inject IJSRuntime JS
@inject IClickManager ClickManager
@implements IAsyncDisposable

<div class="btn-group" @onclick:stopPropagation="true">
    <button class="form-select" @onclick="dropdownManager.Toggle" @onclick:stopPropagation="true">
        @ButtonText
    </button>
    <div class="dropdown-menu @DropdownCssClass">
        @Content
    </div>
</div>

@code {
    private IJSObjectReference? module;

    [Parameter]
    public RenderFragment? ButtonText { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public EventHandler<bool>? OnDropdown { get; set; }

    private bool collapseDropdown = false;
    private DropdownManager dropdownManager;

    private string? DropdownCssClass => collapseDropdown ? "show" : null;

    protected override void OnInitialized()
    {
        dropdownManager = new DropdownManager(Guid.NewGuid().ToString(), ClickManager);
        dropdownManager.CollapsedChange += CollapseLoginMenu;
        if (OnDropdown != null)
            dropdownManager.CollapsedChange += OnDropdown;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./clickmanager.js");
            await ClickManager.SetupWindowClickCallback(module);
        }
    }

    private void CollapseLoginMenu(object? sender, bool collapse)
    {
        collapseDropdown = collapse;
        StateHasChanged();
    }

    public void ToggleDropdown()
    {
        dropdownManager.Toggle();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
            await module.DisposeAsync();
    }
}
