@using Microsoft.JSInterop;

@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="dropdown-menu" @ref=dropdown>
    @ChildContent
</div>

@code {
    private ElementReference? dropdown;
    private DropdownHandler? dropdownHandler;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDropped { get; set; }

    [Parameter]
    public EventCallback<bool> IsDroppedChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dropdownHandler = await DropdownHandler.New(JS);
            if (dropdown is not null)
                await dropdownHandler.AddCloseEventListeners(dropdown.Value);
        }
    }

    public Task ToggleDropdown()
    {
        IsDropped = !IsDropped;
        return IsDroppedChanged.InvokeAsync();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (dropdownHandler is not null)
            await dropdownHandler.DisposeAsync();
    }
}
