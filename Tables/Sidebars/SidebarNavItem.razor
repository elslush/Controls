@using Controls.Buttons;
@using Controls.Selection;
@using Controls.Sidebars.States
@inject NavigationState NavState

<span
    @onclick="EventUtil.AsNonRenderingEventHandler(OnClick)"
    @onmouseover="OnMouseOver"
    @onmouseout="OnMouseOut"
    style="@Style"
>
    <Button Href="@Item.Link">
        <Content>
            @if (!string.IsNullOrWhiteSpace(Item.SvgTag))
            {
                <svg class="nav-icon" width="16" height="16"><use href="#@Item.SvgTag"></use></svg>
            }
            @Item.Text
        </Content>
    </Button>
</span>



@code {
    private bool isHovered;

    private string Style 
    {
        get
        {
            if (isHovered)
                return Item.NavItemColors.HoverColors.Value;
            if (Item.IsSelected)
                return Item.NavItemColors.ClickedColors.Value;
            return Item.NavItemColors.DefaultColors.Value;
        }
    }

    [EditorRequired]
    [Parameter]
    public NavItem Item { get; set; }

    [EditorRequired]
    [Parameter]
    public SelectionCollection<NavItem> NavItemCollection { get; set; }

    protected override void OnParametersSet()
    {
        if (NavState.Path.Equals(Item.Link, StringComparison.CurrentCultureIgnoreCase))
            Item.Select(true, false);
        Item.OnSelect += OnSelect;
    }

    private void OnSelect(object? sender, bool isSelected) => StateHasChanged();

    private void OnClick() => NavItemCollection.Select(Item, !Item.IsSelected);

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}