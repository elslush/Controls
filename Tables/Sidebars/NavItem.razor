@using Controls.Animations
@using Controls.Animations.Background
@using Microsoft.AspNetCore.Components.Routing
@using System.Drawing
@using static Controls.Colors.ColorExtensions

@inject NavigationManager NavigationManager

<Fade @ref=@fade>
    <NavLink
        @onmouseover=OnMouseOver 
        @onmouseout=OnMouseOut
        ActiveClass=@IAnimation.ActiveClass
        href=@Link
        class=@IsHovered
        style=@style
        ChildContent=ChildContent
    />
</Fade>


@code {
    private Fade? fade;
    private string? style;
    private Color backgroundColor, hoveredBackgroundColor;

    private bool isHovered;
    private string? IsHovered => isHovered ? $"{fade?.AnimationClass} hovered" : fade?.AnimationClass;

    [CascadingParameter]
    public NavHeader? CurrentHeader { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; }

    [Parameter, EditorRequired]
    public Color BackgroundColor { get; set; }

    [Parameter, EditorRequired]
    public Color HoveredBackgroundColor { get; set; }

    [Parameter]
    public string Link { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        if (backgroundColor != BackgroundColor || hoveredBackgroundColor != HoveredBackgroundColor)
        {
            backgroundColor = BackgroundColor;
            hoveredBackgroundColor = HoveredBackgroundColor;
            Color fadeBackgroundColor = Color.FromArgb(200, BackgroundColor);
            style = Fade.GetAnimationStyle(fadeBackgroundColor, fadeBackgroundColor.GetContrastingTextColor())
                .AppendFormat("--nav-background-color: {0};--nav-color: {1};", backgroundColor.ToRGBStyle(), backgroundColor.GetContrastingTextColor())
                .AppendFormat("--nav-hovered-background-color: {0};--nav-hovered-color: {1};", hoveredBackgroundColor.ToRGBStyle(), hoveredBackgroundColor.GetContrastingTextColor())
                .ToString();
        }
    }

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && NavigationManager.ToBaseRelativePath(NavigationManager.Uri).Equals(Link, StringComparison.InvariantCultureIgnoreCase))
        {
            CurrentHeader?.Select(true);  
        }
    }
}