@using Controls.Buttons
@using Controls.Collapsibles
@using Controls.Css
@using Controls.Selection
@using Controls.Sidebars.States
@using System.Text.RegularExpressions
@inject NavigationState NavState

<Button
    Href=@Link
    CssClasses=CssClasses
    CssStyles=CssStyles
    OnClick="OnClick"
    OnHover=OnHover
>
    @if (!string.IsNullOrWhiteSpace(SvgTag))
    {
        <svg class="nav-icon" width="16" height="16"><use href="#@SvgTag"></use></svg>
    }
    @Text
</Button>

@code {
    private bool isHovered, shouldRender;

    private Styles CssStyles => 
        SelectionContainer?.IsSelected(Link) ?? false
        ? SelectedStyle 
        : isHovered ? HoverStyle : DefaultStyle;

    [CascadingParameter]
    public SingleSelectionContainer<string>? SelectionContainer { get; set; }

    [CascadingParameter]
    public NavHeader? CurrentHeader { get; set; }

    [Parameter, EditorRequired]
    public string? Text { get; set; }

    [Parameter]
    public string Link { get; set; } = string.Empty;

    [Parameter]
    public string? SvgTag { get; set; }

    [Parameter, EditorRequired]
    public Styles DefaultStyle { get; set; }

    [Parameter, EditorRequired]
    public Styles HoverStyle { get; set; }

    [Parameter, EditorRequired]
    public Styles SelectedStyle { get; set; }

    [Parameter]
    public Classes? CssClasses { get; set; }

    protected override bool ShouldRender() => shouldRender;

    private void OnHover(bool isHovered)
    {
        this.isHovered = isHovered;
        shouldRender = true;
    }

    private Task OnClick()
    {
        shouldRender = true;
        return SelectionContainer?.AddValue(Link) ?? Task.CompletedTask;
    }

    private static readonly Regex sWhitespace = new Regex(@"\s+");
    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(Link) && Text is not null)
            Link = sWhitespace.Replace(Text.ToLower(), "");
        shouldRender = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && NavState.Path.Equals(Link, StringComparison.CurrentCultureIgnoreCase))
        {
            if (SelectionContainer is not null)
            {
                await SelectionContainer.AddValue(Link);
                SelectionContainer.ActiveValueChanged = () =>
                {

                };
            }
            
            CurrentHeader?.Select(true);
        }
        shouldRender = false;
    }
}