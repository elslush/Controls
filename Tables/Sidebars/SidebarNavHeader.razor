@using Controls.Collapsibles;
@using Controls.Buttons;
@using Controls.Selection;
@using Controls.Selection.SelectionBehaviors
@using Controls.Sidebars.States
@inject NavigationState NavState

<span
    @onclick="OnClick"
    @onmouseover="OnMouseOver"
    @onmouseout="OnMouseOut"
    style="@Style"
>
    <CollapsibleButton 
        TItem="NavHeader" 
        Item="Item"
        IsCollapsed="isSelected"
    >
        <Content>
            @Item.Text
        </Content>
    </CollapsibleButton>
</span>


<div class="nav-header-children">
    <Collapsible TItem="NavHeader" Item="Item" IsCollapsed="isSelected">
        <Template>
            <SidebarList Items="Item.Children" NavItemCollection="NavItemCollection"></SidebarList>
        </Template>
    </Collapsible>
</div>

@code {
    private bool isSelected, isHovered;

    private string Style 
    {
        get
        {
            if (isHovered)
                return Item.NavItemColors.HoverColors.Value;
            if (isSelected)
                return Item.NavItemColors.ClickedColors.Value;
            return Item.NavItemColors.DefaultColors.Value;
        }
    }

    [EditorRequired]
    [Parameter]
    public NavHeader Item { get; set; }

    [Parameter]
    public SelectionCollection<NavItem> NavItemCollection { get; set; } = new(new SingleWODeselectBehavior<NavItem>());

    private bool ContainsChildPath(ISidebarItem item)
    {
        foreach (var child in item.Children)
        {
            if (child is NavItem navItem)
            {
                if (NavState.Path.Equals(navItem.Link, StringComparison.CurrentCultureIgnoreCase))
                    return true;
            }
            else if (ContainsChildPath(child))
                return true;
        }
        return false;
    }

    protected override void OnParametersSet()
    {
        Item.OnSelect += OnSelect;
        if (ContainsChildPath(Item))
            isSelected = true;
    }

    private void OnSelect(object? sender, bool isSelected) => this.isSelected = isSelected;

    private void OnClick() => Item.Select(!isSelected);

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}
