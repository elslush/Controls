@typeparam TItem where TItem : SelectableValue

<span style="@Style" @onmouseover="OnMouseOver" @onmouseout="OnMouseOut" @onclick="OnClick">
    @Content(Item)
</span>


@code {
    private TItem? previousItem;
    private bool isHovered = false;

    private string ColorStyle => 
        IsDisabled
            ? Item.SelectionColors.DisabledColors.Styles
            : isHovered 
                ? Item.SelectionColors.HoverColors.Styles 
                : IsSelected 
                    ? Item.SelectionColors.ClickedColors.Styles 
                    : Item.SelectionColors.StaticColors.Styles;
    private string CursorStyle => IsDisabled ? string.Empty : "cursor: pointer;";
    private string Style => $"{ColorStyle}{CursorStyle}";

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public TItem Item { get; set; }

    [EditorRequired]
    [Parameter]
    public RenderFragment<TItem> Content { get; set; }

    protected override void OnParametersSet()
    {
        if (Item is not null && Item != previousItem)
        {
            Item.OnSelect += OnSelectChanged;
            Item.OnDisable += OnDisableChanged;
        }

        previousItem = Item;
    }

    private void OnSelectChanged(object? sender, bool isSelected)
    {
        IsSelected = isSelected;
        StateHasChanged();
    }

    private void OnDisableChanged(object? sender, bool isDisabled)
    {
        IsDisabled = isDisabled;
        StateHasChanged();
    }

    private void OnClick() => Item.SelectFromCollection(!IsSelected);

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}
