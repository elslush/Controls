@typeparam T
@implements ISelectionContainer<T>

<CascadingValue IsFixed=true Value=this>
    @ChildContent
</CascadingValue>

@code {
    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback ActiveValueChanged { get; set; }

    [Parameter]
    public Func<ICollection<T>> CollectionInitializer { get; set; } = () => new HashSet<T>();

    protected override void OnInitialized()
    {
        ActiveValues = CollectionInitializer.Invoke();
    }

    public ICollection<T> ActiveValues { get; private set; } = default!;

    public void AddValue(T value) => ActiveValues.Add(value);

    public void RemoveValue(T value) => ActiveValues.Remove(value);

    public Task Notify() => ActiveValueChanged.InvokeAsync();

    public bool IsSelected(T value) => ActiveValues.Contains(value);

    public void Clear() => ActiveValues.Clear();
}