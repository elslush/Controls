@using Controls.Animations
@using Controls.Collapsibles
@using Controls.Buttons
@using Controls.Selection

@*@typeparam T where T : IAnimation*@

<div class="nav-header-container">
    <Button @onclick=OnClick @attributes=InputAttributes>
        <CollapsibleSelector IsCollapsed="isSelected"><span class="nav-header-text">@Text</span></CollapsibleSelector>
    </Button>

    <div class="nav-header-children">
        <Collapsible IsCollapsed="isSelected">
            <CascadingValue Value=this IsFixed=true>
                @ChildContent
            </CascadingValue>
        </Collapsible>
    </div>
</div>


@code {
    private bool isSelected, isHovered;
    private string? hoveredClass, defaultClass, activeClass;
    private string? CssClass => isHovered ? hoveredClass : defaultClass;

    [CascadingParameter]
    public NavHeader? CurrentHeader { get; set; }

    [Parameter, EditorRequired]
    public string? Text { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? InputAttributes { get; set; }

    @*protected override void OnParametersSet()
    {
        hoveredClass = $"nav-item {T.AnimationClass} {IAnimation.ActiveClass} {Class}";
        defaultClass = $"nav-item {T.AnimationClass} {Class}";
        activeClass = $"selected {ActiveClass}";
    }*@

    public void Select(bool isSelected)
    {
        this.isSelected = isSelected;
        StateHasChanged();
        CurrentHeader?.Select(isSelected);
    }

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;

    private void OnClick() => isSelected = !isSelected;
}
