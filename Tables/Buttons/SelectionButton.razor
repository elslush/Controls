@using System.Drawing
@using Controls.Animations
@using Controls.Animations.Background
@using static Controls.Colors.ColorExtensions

<Fade @ref=@fade>
    <Button @onmouseover=OnMouseOver @onmouseout=OnMouseOut class=@IsActive style=@style @attributes=InputAttributes ChildContent=ChildContent/>
</Fade>


@code {
    private Fade? fade;
    private string? style;
    private Color backgroundColor;

    private bool isHovered;
    private string? IsActive => isHovered ? $"{fade?.AnimationClass} {IAnimation.ActiveClass}" : fade?.AnimationClass;

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? InputAttributes { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; }

    [Parameter, EditorRequired]
    public Color BackgroundColor { get; set; }

    [Parameter]
    public bool IsSelected { get; set; }

    protected override void OnParametersSet()
    {
        if (backgroundColor != BackgroundColor)
        {
            backgroundColor = BackgroundColor;
            Color fadeBackgroundColor = Color.FromArgb(200, BackgroundColor);
            style = Fade.GetAnimationStyle(fadeBackgroundColor, fadeBackgroundColor.GetContrastingTextColor())
                .Append(Button.GetAnimationStyle(backgroundColor, backgroundColor.GetContrastingTextColor()))
                .ToString();
        }
    }

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}
