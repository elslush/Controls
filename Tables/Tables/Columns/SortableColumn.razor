@using Controls.Tables.Columns
@using Controls.Selection

@typeparam TGridItem
@inherits ColumnBase<TGridItem>

@Title

@code {
    private bool sortByAscending, previousByAscending, isSorting, shouldRender;

    [CascadingParameter]
    public SingleSelectionContainer<ColumnBase<TGridItem>> SortbyColumnContainer { get; set; } = default!;

    [CascadingParameter]
    public SingleSelectionContainer<ColumnOptions<TGridItem>> ColumnOptionsContainer { get; set; } = default!;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }



    private void OnHeaderClicked()
    {
        if (SortbyColumnContainer.IsSelected(this))
        {
            if (isSorting)
                sortByAscending = !sortByAscending;
            else
            {
                sortByAscending = true;
                isSorting = true;
            }
        }
        else
        {
            shouldRender = previousByAscending == true;
            sortByAscending = false;
            isSorting = false;
        }

        //if (_virtualizeComponent is not null)
        //{
        //    await _virtualizeComponent.RefreshDataAsync();
        //}
    }

    private Task SelectValue() => SortbyColumnContainer.AddValue(this, true);

    private string AriaSortValue
        => isSorting
            ? (sortByAscending ? "ascending" : "descending")
            : "none";

    private string? ColumnHeaderClass
        => isSorting
        ? $"{ColumnClass} {(sortByAscending ? "sorted-asc" : "sorted-desc")}"
        : ColumnClass;

    protected override void OnParametersSet()
    {
        SortbyColumnContainer.OnActiveValueChanged += (_, __) => OnHeaderClicked();
        HeaderContent = StringBuilder =>
        {
            <th class=@ColumnHeaderClass aria-sort=@AriaSortValue @key="@this" scope="col">
                <div class="column-title-flex">
                    <button class="column-title sortable" @onclick=@SelectValue>
                            <span class="sort-indicator" aria-hidden="true"></span>
                            <div class="title-text">@col.HeaderContent</div>
                        </button>

                    @if (col.ColumnOptions is not null)
                    {
                        <button class="column-options-button" @onclick="@(() => OnColumnOptionsButtonClicked(col))"></button>
                    }
                </div>

                @if (col == _displayOptionsForColumn)
                {
                    <div class="column-options">
                        @col.ColumnOptions
                    </div>
                }

                @if (ResizableColumns)
                {
                    <div class="column-width-draghandle"></div>
                }
            </th>
        };
    }
}