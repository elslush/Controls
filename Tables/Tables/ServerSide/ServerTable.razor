@typeparam TItem

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Controls.ServerSide;
@using Controls.Tables.Paging;
@using Controls.Tables.Filtering;
@using Controls.Tables.Selection;
@using Controls.Sorting;
@using Controls.Paging;
@using Microsoft.JSInterop;

@inject IJSRuntime JS

<div class="row">
    <div class="col">
        <TableFilter OnFilter="OnGlobalSort"></TableFilter>
    </div>
    <div class="col">
        <button type="button" class="btn btn-primary">Export</button>
        <button type="button" class="btn btn-secondary">Secondary</button>
    </div>
</div>

<div class="row" >
    <div class="col-4">
        @*<SelectedRows
            RowSelectState="rowSelectState"
            Columns="columns"
            SelectedColumn="@columns.FirstOrDefault()"
        ></SelectedRows>*@
	</div>
    <div class="col-8">
        <div class="table-container">
            <table id="@tableId" class="table table-bordered" style="width:@(@Width > 0 ? @Width : "auto")">
                <thead>
                    <tr>
                
                    </tr>
                </thead>
                <tbody>
                    @*<Virtualize ItemsProvider="LoadRows" @ref="Virtualize" Context="row" TItem="TItem" ItemSize="ROW_CACHE">
                        <ItemContent>
                            <SelectableRow Value="row" @key="row.Key" OnRowAdded="OnRowAdded" OnRowRemoved="OnRowRemoved">
                                <Content>
                                    @foreach (var record in row.Records)
                                    {
                                        <EditableCell TItem="Key" Key="row.Key" Value="@record.Value" InputType="@record.Column.Type" onCellChange="CellChange">

                                        </EditableCell>
                                    }
                                </Content>
                            </SelectableRow>
                        </ItemContent>
                        <Placeholder>
                            <p>
                                Loading&hellip;
                            </p>
                        </Placeholder>
                    </Virtualize>*@
                </tbody>
            </table>
        </div>
        <TablePagination
            @ref="TablePagination"
            ItemCount="ItemCount"
            OnPageCallback="OnPage">
        </TablePagination>
    </div>
</div>




@code {
    private const int ROW_CACHE = 30;
    private readonly QueryProperties queryProperties = new();
    private readonly HashSet<TItem> selectedItems = new();
    private readonly Guid tableId = Guid.NewGuid();

    [EditorRequired]
    [Parameter]
    public RenderFragment? Header { get; set; }

    [EditorRequired]
    [Parameter]
    public RenderFragment? Body { get; set; }

    [Parameter]
    public int Width { get; set; }

    [Parameter]
    public bool IsResizable { get; set; }

    [EditorRequired]
    [Parameter]
    public IServerCollectionFactory<TItem> CollectionFactory { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsResizable)
            await JS.InvokeVoidAsync("attachResizer", tableId);
    }

    private Virtualize<TItem> Virtualize { get; set; }
    private TablePagination TablePagination { get; set; }

    private int ItemCount { get; set; } = 0;

    private void OnRowAdded(TItem item) => selectedItems.Add(item);

    private void OnRowRemoved(TItem item) => selectedItems.Remove(item);

    private async Task OnPage(Pagination pagination)
    {
        queryProperties.Pagination = pagination;
        await Virtualize.RefreshDataAsync();
    }

    private async Task OnSortAdd(IEnumerable<Sort> sort)
    {
        queryProperties.Sorts.UnionWith(sort);
        await Virtualize.RefreshDataAsync();
    }

    private async Task OnSortRemove(IEnumerable<Sort> sort)
    {
        queryProperties.Sorts.ExceptWith(sort);
        await Virtualize.RefreshDataAsync();
    }

    private async Task OnGlobalSort(string filterText)
    {
        queryProperties.GlobalFilter = filterText;
        await Virtualize.RefreshDataAsync();
    }

    //private async ValueTask<ItemsProviderResult<TItem>> LoadRows(ItemsProviderRequest request)
    //{
    //    if (!CollectionFactory.IsValid)
    //        return new ItemsProviderResult<TItem>(Array.Empty<TItem>(), 0);

    //    var numRows = Math.Min(request.Count, queryProperties.Pagination.Take);
    //    queryProperties.Pagination = new()
    //    {
    //        Skip = queryProperties.Pagination.Skip + request.StartIndex,
    //        Take = numRows,
    //    };

    //    var collection = await CollectionFactory.GetCollection(queryProperties, request.CancellationToken);
    //    ItemCount = collection.Count;

    //    //rowSelectState.AllItems = rowCollection.Rows;

    //    var total = Math.Min(collection.Count - queryProperties.Pagination.Skip, queryProperties.Pagination.Take);
    //    return new ItemsProviderResult<TItem>(collection.Rows, total);
    //}
}
