@using Controls.Selection
@implements ITab

<li>
    <a
        @onmouseover="OnMouseOver"
        @onmouseout="OnMouseOut"
        @onclick="ActivateTab" 
        class="tab-item" 
        style="@Style" 
        role="button"
    >
        @Content
    </a>
</li>

@code {
    private bool isHovered;

    private string Style 
    {
        get
        {
            if (SelectionContainer?.ActiveValue == this)
                return Colors.ClickedColors.Value;
            if (isHovered)
                return Colors.HoverColors.Value;
            return Colors.DefaultColors.Value;
        }
    }

    [CascadingParameter]
    public SingleSelectionContainer<ITab>? SelectionContainer { get; set; }

    [Parameter]
    public TabColors Colors { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDefault { get; set; }

    [Parameter]
    public EventCallback OnSelect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (IsDefault)
            await ActivateTab();
    }

    private Task ActivateTab()
    {
        SelectionContainer?.UpdateValue(this);
        return OnSelect.InvokeAsync();
    }

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}
