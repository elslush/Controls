@using Controls.Selection
@implements ITab

<a
    @onclick=ActivateTab
    class="line-tab @IsActive"
    role="button"
    @attributes=InputAttributes
>
    @Content
</a>

@code {
    private string? IsActive => SelectionContainer?.ActiveValue == this ? "active" : null;

    [CascadingParameter]
    public SingleSelectionContainer<ITab>? SelectionContainer { get; set; }


    [Parameter, EditorRequired]
    public RenderFragment? Content { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDefault { get; set; }

    [Parameter]
    public EventCallback OnSelect { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? InputAttributes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (IsDefault)
            await ActivateTab();
    }

    private Task ActivateTab()
    {
        SelectionContainer?.AddValue(this);
        return OnSelect.InvokeAsync();
    }
}