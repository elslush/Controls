@using Controls.Animations.Background
@using Controls.Selection
@using Controls.Buttons
@using System.Drawing
@using static Controls.Colors.ColorExtensions
@implements ITab

<BasicButton
    BackgroundColor=SelectedBorderColor
    ChildContent=ChildContent
/>
<Fade BackgroundColor=fadeBackgroundColor TextColor=fadeTextColor>
    <Button style=@Style @attributes=InputAttributes ChildContent=ChildContent/>
</Fade>

@code {
    private string? Style => SelectionContainer?.ActiveValue == this ? defaultStyle : selectedStyle;
    private string? defaultStyle, selectedStyle;
    private Color backgroundColor, textColor, fadeBackgroundColor, fadeTextColor;

    [CascadingParameter]
    public SingleSelectionContainer<ITab>? SelectionContainer { get; set; }

    [Parameter, EditorRequired]
    public Color SelectedBorderColor { get; set; }

    [Parameter]
    public Color? HoverBorderColor { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment? Content { get; set; }

    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool IsDefault { get; set; }

    [Parameter]
    public EventCallback OnSelect { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? InputAttributes { get; set; }

    protected override void OnParametersSet()
    {
        defaultStyle = "--line-tab-color: transparent";
        selectedStyle = $"--line-tab-color: {SelectedBorderColor.ToRGBStyle()}";
        if (HoverBorderColor is null)
            hoveredCss = $"--line-tab-color: {SelectedBorderColor.ToRGBStyle()}";
         else
            hoveredCss = $"--line-tab-color: {HoverBorderColor.Value.ToRGBStyle()}";
    }

    protected override async Task OnInitializedAsync()
    {
        if (IsDefault)
            await ActivateTab();
    }

    private Task ActivateTab()
    {
        SelectionContainer?.AddValue(this);
        return OnSelect.InvokeAsync();
    }

    private void OnMouseOver() => isHovered = true;

    private void OnMouseOut() => isHovered = false;
}
