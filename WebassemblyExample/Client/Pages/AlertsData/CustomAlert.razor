@using Controls.Alerts
@using Controls.Buttons
@using System.Timers
@implements IDisposable

<div class="alert">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
		<path opacity="0.3" d="M14 2H6C4.89543 2 4 2.89543 4 4V20C4 21.1046 4.89543 22 6 22H18C19.1046 22 20 21.1046 20 20V8L14 2Z" fill="black"></path>
		<path d="M20 8L14 2V6C14 7.10457 14.8954 8 16 8H20Z" fill="black"></path>
		<rect x="13.6993" y="13.6656" width="4.42828" height="1.73089" rx="0.865447" transform="rotate(45 13.6993 13.6656)" fill="black"></rect>
		<path d="M15 12C15 14.2 13.2 16 11 16C8.8 16 7 14.2 7 12C7 9.8 8.8 8 11 8C13.2 8 15 9.8 15 12ZM11 9.6C9.68 9.6 8.6 10.68 8.6 12C8.6 13.32 9.68 14.4 11 14.4C12.32 14.4 13.4 13.32 13.4 12C13.4 10.68 12.32 9.6 11 9.6Z" fill="black"></path>
	</svg>
    <div class="custom-alert-text">
	    <h5>This is a custom alert.</h5>
	    <span>All alerts are fully customizable due to the new DynamicComponent component in Blazor.</span>
    </div>
    <span class="alert-button-container">
        <Button OnClick="OnClose">
            &times;
        </Button>
    </span>
</div>

@code {
    private Timer? timer;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public TimeSpan? AutoHideTime { get; set; }

    protected override void OnParametersSet()
    {
        if (AutoHideTime is not null && AutoHideTime.Value.TotalMilliseconds > 0)
        {
            timer = new(AutoHideTime.Value.TotalMilliseconds)
            {
                AutoReset = false,
                Enabled = true,
            };
            timer.Elapsed += (_, __) => OnClose.InvokeAsync();
        }
    }

    void IDisposable.Dispose()
    {
        timer?.Dispose();
    }
}
