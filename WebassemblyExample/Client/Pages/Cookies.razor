@implements IAsyncDisposable
@inject IJSRuntime JS

@page "/cookies"
@using Controls.FloatingUI
@using Controls.FloatingUI.Middleware
@using static Controls.FloatingUI.FloatingUIHandler

<div>
    <button @ref=buttonReference id="button" aria-describedby="tooltip">
        My button
    </button>
    <div @ref=tooltipReference id="tooltip" role="tooltip" style="position: absolute;left:@result.LeftStyle;top:@result.TopStyle;">My tooltip</div>
</div>

@code {
    private FloatingUIHandler? floatingUIHandler;
    private static FloatingUIOptions options = new()
                {
                    Placement = Placement.Bottom,
                    Middleware = new IMiddleware[] { new Shift(), new Flip(), },
                };

    private ElementReference buttonReference;
    private ElementReference tooltipReference;

    private Result result = new() { X = 0, Y = 0, };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            floatingUIHandler = await FloatingUIHandler.New(JS, options);
            await floatingUIHandler.AddEventListeners(Update, buttonReference, tooltipReference);
            await Update();
        }
    }

    private async Task Update()
    {
        if (floatingUIHandler is not null)
        {
            result = await floatingUIHandler.GetPosition(buttonReference, tooltipReference);
            await InvokeAsync(StateHasChanged);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (floatingUIHandler is not null)
            await floatingUIHandler.DisposeAsync();
    }
}
