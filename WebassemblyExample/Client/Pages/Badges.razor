@using Controls.Badges
@using Controls.Buttons
@using Controls.Code
@using Controls.Lists
@using Controls.Selection
@using Controls.Tabs
@using System.Drawing
@using WebassemblyExample.Client.Pages.ButtonsData
@using WebassemblyExample.Client.Pages.TabsData
@using static Controls.Colors.ColorExtensions

@page "/badges"

<div class="inner-container container">
    <div class="inner-header header">
        <div class="inner-header-left header-left">
            <h1>Badges</h1>
            <small>Great for labeling buttons and components in general!</small>
        </div>
        <div class="header-right">
            <small>By Matthew Ormson, 01/16/2022, 3 minutes to read</small>
        </div>
    </div>

    <div class="inner-content content">
        <div class="card">
            <h2>Badge Shape</h2>

            <p>Badges can be rectangular, square or circle.</p>

            <TabContainer TabType="TabType.Line">
                @ShapeTab((true, BadgeType.Rectangle))
                @ShapeTab((false, BadgeType.Square))
                @ShapeTab((false, BadgeType.Circle))
            </TabContainer>
        </div>

        <div class="card">
            <h2>Badge Color</h2>

            <p>Badge color can be specified through a <CodeBlock Mode="CodeBlock.ColorMode.Dark" Inline=true><span class="hljs-title">Styles</span></CodeBlock> Struct.</p>

            <TabContainer TabType="TabType.Line">
                @ColorTab((true, Color.White))
                @ColorTab((false, Color.Black))
                @ColorTab((false, Color.Red))
                @ColorTab((false, Color.Orange))
                @ColorTab((false, Color.Yellow))
                @ColorTab((false, Color.Green))
                @ColorTab((false, Color.Blue))
                @ColorTab((false, Color.Purple))
            </TabContainer>
        </div>

        <div class="card">
            <h2>Badge Position</h2>

            <p>
                By default, a badge is positioned as <CodeBlock Mode="CodeBlock.ColorMode.Dark" Inline=true><span class="hljs-title">BadgePosition.Inline</span></CodeBlock>.
                Changing the badge position is useful when placed inside of a button, but can be used in any container.
            </p>

            <TabContainer TabType="TabType.Line">
                @PositionTab((true, BadgePosition.Inline))
                @PositionTab((false, BadgePosition.UpperLeft))
                @PositionTab((false, BadgePosition.UpperRight))
                @PositionTab((false, BadgePosition.LowerLeft))
                @PositionTab((false, BadgePosition.LowerRight))
            </TabContainer>
        </div>
    </div>
</div>

@code {
    private static readonly Color defaultButtonColor = Color.FromArgb(94, 164, 228);
    //private static readonly Styles defaultBadgeStyle = new(new Style("background-color", Color.FromArgb(94, 164, 228).ToRGBStyle())),
    //    redBadgeStyle = new(new Style("background-color", Color.Red.ToRGBStyle()), new Style("width", "8px"), new Style("height", "8px"));


    private RenderFragment<(bool, BadgePosition)> PositionTab = content => __builder =>
    {
        string positionName = Enum.GetName(typeof(BadgePosition), content.Item2);
        <DefaultLineTab IsDefault=content.Item1>
            <Content>
                <BasicButton BackgroundColor=defaultButtonColor>
                    Test<Badge BackgroundColor=Color.Red BadgeTypeValue=BadgeType.Circle Position=content.Item2>1</Badge>
                </BasicButton>
            </Content>
            <ChildContent>
                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
<span class="hljs-tag">&lt;<span class="hljs-name">Badge</span> <span class="hljs-attr">Position</span>=<span class="hljs-string">BadgePosition.@positionName</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">Badge</span>&gt;</span>
                </CodeBlock>
            </ChildContent>
        </DefaultLineTab>
    };

    private RenderFragment<(bool, Color)> ColorTab = content => __builder =>
    {
        string backgroundColorName = content.Item2.IsNamedColor ? Enum.GetName(typeof(KnownColor), content.Item2.ToKnownColor()) : string.Empty;
        <DefaultLineTab IsDefault=content.Item1>
            <Content>
                <Badge BackgroundColor=content.Item2>test</Badge>
            </Content>
            <ChildContent>
                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
<span class="hljs-tag">&lt;<span class="hljs-name">Badge</span> <span class="hljs-attr">BackgroundColor</span>=<span class="hljs-string">Color.@backgroundColorName</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">Badge</span>&gt;</span>
                </CodeBlock>
            </ChildContent>
        </DefaultLineTab>
    };

    private RenderFragment<(bool, BadgeType)> ShapeTab = content => __builder =>
    {
        string shapeName = Enum.GetName(typeof(BadgeType), content.Item2);
        <DefaultLineTab IsDefault=content.Item1>
            <Content>
                <Badge BackgroundColor=defaultButtonColor BadgeTypeValue=content.Item2>test</Badge>
            </Content>
            <ChildContent>
                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
<span class="hljs-tag">&lt;<span class="hljs-name">Badge</span> <span class="hljs-attr">BadgeTypeValue</span>=<span class="hljs-string">"BadgeType.@shapeName"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">Badge</span>&gt;</span>
                </CodeBlock>
            </ChildContent>
        </DefaultLineTab>
    };
}
