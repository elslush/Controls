@using Controls.Animations._2D
@using Controls.Animations.Background
@using Controls.Buttons
@using Controls.Code
@using Controls.Css
@using Controls.Lists
@using Controls.Selection
@using Controls.Tabs
@using System.Drawing
@using Microsoft.AspNetCore.Components
@using WebassemblyExample.Client.Pages.ButtonsData
@using WebassemblyExample.Client.Pages.TabsData

@page "/animations"

<div class="inner-container container">
    <div class="inner-header header">
        <div class="inner-header-left header-left">
            <h1>Animations</h1>
            <small>Useful for a more engaging UI. Can be applied to any component that allows CSS class modification.</small>
        </div>
        <div class="header-right">
            <small>By Matthew Ormson, 01/16/2022, 3 minutes to read</small>
        </div>
    </div>

    <div class="inner-content content">
        <div class="card">
            <h2>2D Animations</h2>

            <p></p>

            <TabContainer TabType="TabType.Line">
                <Bounce Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "BounceIn"))</Bounce>
                <Bounce Context="css_class">@AnimationTab((true, css_class, new Style[] { bounceOutStyle }, "BounceOut"))</Bounce>
                <Buzz Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Buzz"))</Buzz>
                <Grow Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Grow"))</Grow>
                <Hang Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Hang"))</Hang>
                <Pop Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Pop"))</Pop>
                <Pulse Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Pulse"))</Pulse>
                <Push Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Push"))</Push>
                <Rotate Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Rotate"))</Rotate>
                <Shrink Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Shrink"))</Shrink>
                <Skew Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Skew"))</Skew>
                <Wobble Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Wobble"))</Wobble>
            </TabContainer>
        </div>

        <div class="card">
            <h2>Background Animations</h2>

            <p></p>

            <TabContainer TabType="TabType.Line">
                <Fade Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "Fade"))</Fade>
                <BackPulse Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "BackPulse"))</BackPulse>
                <SweepRight Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "SweepRight"))</SweepRight>
                <SweepBottom Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "SweepBottom"))</SweepBottom>
                <SweepTop Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "SweepTop"))</SweepTop>
                <RadialOut Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "RadialOut"))</RadialOut>
                <RadialIn Context="css_class">@AnimationTab((true, css_class, Array.Empty<Style>(), "RadialIn"))</RadialIn>
            </TabContainer>
        </div>

        <div class="card">
            <h2>Selection Buttons</h2>
        </div>

        <div class="card">
            <h2>Icons</h2>
        </div>

        <div class="card">
            <h2>Animations</h2>
        </div>

        <div class="card">
            <h2>Custom Content</h2>
        </div>
    </div>
</div>

@code {
    private static readonly Style bounceOutStyle = new("--scale", "0.8");

    private RenderFragment<(bool, Class, Style[], string)> AnimationTab = content => __builder =>
    {
        Classes classes = new(content.Item2);
        Styles[] styles = new Styles[] { new(content.Item3) };
        <DefaultLineTab IsDefault=content.Item1>
            <Content>
                <DefaultBasicButton CssClasses=classes CssStyles=content.Item3>@content.Item4</DefaultBasicButton>
            </Content>
            <ChildContent>
                
                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">@content.Item2</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                </CodeBlock>
            </ChildContent>
        </DefaultLineTab>
    };
}
