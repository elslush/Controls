@using Controls.Animations
@using Controls.Animations._2D
@using Controls.Animations.Background
@using Controls.Buttons
@using Controls.Code
@using Controls.Css
@using Controls.Lists
@using Controls.Selection
@using Controls.Tabs
@using System.Drawing
@using Microsoft.AspNetCore.Components
@using WebassemblyExample.Client.Pages.ButtonsData
@using WebassemblyExample.Client.Pages.TabsData

@page "/animations"

<div class="inner-container container">
    <div class="inner-header header">
        <div class="inner-header-left header-left">
            <h1>Animations</h1>
            <small>Useful for a more engaging UI. Can be applied to any component that allows CSS class modification.</small>
        </div>
        <div class="header-right">
            <small>By Matthew Ormson, 01/16/2022, 3 minutes to read</small>
        </div>
    </div>

    <div class="inner-content content">
        <div class="card">
            <h2>2D Animations</h2>

            <p></p>

            <TabContainer TabType="TabType.Line">
                @AnimationTab((true, "bounce", "Bounce"))
                @AnimationTab((false, "buzz", "Buzz"))
                @AnimationTab((false, "grow", "Grow"))
                @AnimationTab((false, "hang", "Hang"))
                @AnimationTab((false, "pop", "Pop"))
                @AnimationTab((false, "pulse", "Pulse"))
                @AnimationTab((false, "push", "Push"))
                @AnimationTab((false, "rotate", "Rotate"))
                @AnimationTab((false, "shrink", "Shrink"))
                @AnimationTab((false, "skew", "Skew"))
                @AnimationTab((false, "wobble", "Wobble"))
            </TabContainer>
        </div>

        @*<div class="card">
            <h2>Background Animations</h2>

            <p></p>

            <TabContainer TabType="TabType.Line">
                <Fade Context="css_class">@ColorTab((true, "", "Fade"))</Fade>
                <BackPulse Context="css_class">@ColorTab((true, "", "BackPulse"))</BackPulse>
                <SweepRight Context="css_class">@ColorTab((true, "", "SweepRight"))</SweepRight>
                <SweepBottom Context="css_class">@ColorTab((true, "", "SweepBottom"))</SweepBottom>
                <SweepTop Context="css_class">@ColorTab((true, "", "SweepTop"))</SweepTop>
                <RadialOut Context="css_class">@ColorTab((true, "", "RadialOut"))</RadialOut>
                <RadialIn Context="css_class">@ColorTab((true, "", "RadialIn"))</RadialIn>
                <RectangleIn Context="css_class">@ColorTab((true, "", "RectangleIn"))</RectangleIn>
                <RectangleOut Context="css_class">@ColorTab((true, "", "RectangleOut"))</RectangleOut>
                <ShutterInHorizontal Context="css_class">@ColorTab((true, "", "ShutterInHorizontal"))</ShutterInHorizontal>
                <ShutterOutHorizontal Context="css_class">@ColorTab((true, "", "ShutterOutHorizontal"))</ShutterOutHorizontal>
                <ShutterInVertical Context="css_class">@ColorTab((true, "", "ShutterInVertical"))</ShutterInVertical>
                <ShutterOutVertical Context="css_class">@ColorTab((true, ", "ShutterOutVertical"))</ShutterOutVertical>
            </TabContainer>
        </div>*@

        <div class="card">
            <h2>Selection Buttons</h2>
        </div>

        <div class="card">
            <h2>Icons</h2>
        </div>

        <div class="card">
            <h2>Animations</h2>
        </div>

        <div class="card">
            <h2>Custom Content</h2>
        </div>
    </div>
</div>

@code {
    private static readonly Style bounceOutStyle = new("--scale", "0.8");
    private static readonly Classes activeClasses = new(IAnimation.ActiveClass);

    private RenderFragment<(bool, string, string)> AnimationTab = content => __builder =>
    {
        <DefaultLineTab IsDefault=content.Item1>
            <Content>
                <Button Class=@content.Item2>@content.Item3</Button>
            </Content>
            <ChildContent>
                
                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">@content.Item2</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
                </CodeBlock>
            </ChildContent>
        </DefaultLineTab>
    };

//    private RenderFragment<(bool, Class, Style[], string)> ColorTab = content => __builder =>
//    {
//        Classes classes = new(content.Item2);
//        Styles styles = new(content.Item3);
//        <DefaultLineTab IsDefault=content.Item1>
//            <Content>
//                <BasicButton CssClasses=classes DefaultStyle=styles HoverStyle=styles>@content.Item4</BasicButton>
//            </Content>
//            <ChildContent>
                
//                <CodeBlock Mode="CodeBlock.ColorMode.Dark">
//<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">@content.Item2</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
//                </CodeBlock>
//            </ChildContent>
//        </DefaultLineTab>
//    };
}
